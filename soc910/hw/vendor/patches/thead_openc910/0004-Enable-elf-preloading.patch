From f634818f72b77002b7f0c4010fbd60dd0f4180f9 Mon Sep 17 00:00:00 2001
From: Nils Wistoff <nwistoff@iis.ee.ethz.ch>
Date: Fri, 18 Nov 2022 13:22:34 +0100
Subject: [PATCH 04/10] Enable elf preloading

tb: Add fesvr elfloader

tb: Pass elf file via command line

Signed-off-by: Nils Wistoff <nwistoff@iis.ee.ethz.ch>
---
 smart_run/logical/tb/tb.v | 106 ++++++++++++++++++++++++----------------------
 1 file changed, 56 insertions(+), 50 deletions(-)

diff --git a/smart_run/logical/tb/tb.v b/smart_run/logical/tb/tb.v
index 7883071..42c0d5c 100644
--- a/smart_run/logical/tb/tb.v
+++ b/smart_run/logical/tb/tb.v
@@ -27,6 +27,10 @@ See the License for the specific language governing permissions and
 limitations under the License.
 */
 
+import uvm_pkg::*;
+
+`include "uvm_macros.svh"
+
 `timescale 1ns/100ps
 
 `define CLK_PERIOD          10
@@ -53,6 +57,10 @@ limitations under the License.
 `define APB_BASE_ADDR       40'hb0000000
 
 module tb();
+  import "DPI-C" function read_elf(input string filename);
+  import "DPI-C" function byte get_section(output longint address, output longint len);
+  import "DPI-C" context function byte read_section(input longint address, inout byte buffer[]);
+
   reg clk;
   reg jclk;
   reg rst_b;
@@ -67,6 +75,9 @@ module tb();
   
   wire uart0_sin;
   wire [7:0]b_pad_gpio_porta;
+
+  static uvm_cmdline_processor uvcl = uvm_cmdline_processor::get_inst();
+  string binary = "";
   
   assign pad_yy_gate_clk_en_b = 1'b1;
   
@@ -108,6 +119,8 @@ module tb();
   bit [31:0] mem_inst_temp [65536];
   bit [31:0] mem_data_temp [65536];
   integer j;
+  longint section_addr, section_len;
+  byte buffer[];
   initial
   begin
     $display("\t********* Init Program *********");
@@ -133,58 +146,51 @@ module tb();
     end
   
     $display("\t********* Read program *********");
-    $readmemh("inst.pat", mem_inst_temp);
-    $readmemh("data.pat", mem_data_temp);
+    void'(uvcl.get_arg_value("+ELF=", binary));
+    void'(read_elf(binary));
+    $display("Loading ELF binary %s", binary);
   
     $display("\t********* Load program to memory *********");
-    i=0;
-    for(j=0;i<32'h4000;i=j/4)
-    begin
-      `RTL_MEM.ram0.mem[i][7:0] = mem_inst_temp[j][31:24];
-      `RTL_MEM.ram1.mem[i][7:0] = mem_inst_temp[j][23:16];
-      `RTL_MEM.ram2.mem[i][7:0] = mem_inst_temp[j][15: 8];
-      `RTL_MEM.ram3.mem[i][7:0] = mem_inst_temp[j][ 7: 0];
-      j = j+1;
-      `RTL_MEM.ram4.mem[i][7:0] = mem_inst_temp[j][31:24];
-      `RTL_MEM.ram5.mem[i][7:0] = mem_inst_temp[j][23:16];
-      `RTL_MEM.ram6.mem[i][7:0] = mem_inst_temp[j][15: 8];
-      `RTL_MEM.ram7.mem[i][7:0] = mem_inst_temp[j][ 7: 0];
-      j = j+1;
-      `RTL_MEM.ram8.mem[i][7:0] = mem_inst_temp[j][31:24];
-      `RTL_MEM.ram9.mem[i][7:0] = mem_inst_temp[j][23:16];
-      `RTL_MEM.ram10.mem[i][7:0] = mem_inst_temp[j][15: 8];
-      `RTL_MEM.ram11.mem[i][7:0] = mem_inst_temp[j][ 7: 0];
-      j = j+1;
-      `RTL_MEM.ram12.mem[i][7:0] = mem_inst_temp[j][31:24];
-      `RTL_MEM.ram13.mem[i][7:0] = mem_inst_temp[j][23:16];
-      `RTL_MEM.ram14.mem[i][7:0] = mem_inst_temp[j][15: 8];
-      `RTL_MEM.ram15.mem[i][7:0] = mem_inst_temp[j][ 7: 0];
-      j = j+1;
-    end
-    i=0;
-    for(j=0;i<32'h4000;i=j/4)
-    begin
-      `RTL_MEM.ram0.mem[i+32'h4000][7:0]  = mem_data_temp[j][31:24];
-      `RTL_MEM.ram1.mem[i+32'h4000][7:0]  = mem_data_temp[j][23:16];
-      `RTL_MEM.ram2.mem[i+32'h4000][7:0]  = mem_data_temp[j][15: 8];
-      `RTL_MEM.ram3.mem[i+32'h4000][7:0]  = mem_data_temp[j][ 7: 0];
-      j = j+1;
-      `RTL_MEM.ram4.mem[i+32'h4000][7:0]  = mem_data_temp[j][31:24];
-      `RTL_MEM.ram5.mem[i+32'h4000][7:0]  = mem_data_temp[j][23:16];
-      `RTL_MEM.ram6.mem[i+32'h4000][7:0]  = mem_data_temp[j][15: 8];
-      `RTL_MEM.ram7.mem[i+32'h4000][7:0]  = mem_data_temp[j][ 7: 0];
-      j = j+1;
-      `RTL_MEM.ram8.mem[i+32'h4000][7:0]   = mem_data_temp[j][31:24];
-      `RTL_MEM.ram9.mem[i+32'h4000][7:0]   = mem_data_temp[j][23:16];
-      `RTL_MEM.ram10.mem[i+32'h4000][7:0]  = mem_data_temp[j][15: 8];
-      `RTL_MEM.ram11.mem[i+32'h4000][7:0]  = mem_data_temp[j][ 7: 0];
-      j = j+1;
-      `RTL_MEM.ram12.mem[i+32'h4000][7:0]  = mem_data_temp[j][31:24];
-      `RTL_MEM.ram13.mem[i+32'h4000][7:0]  = mem_data_temp[j][23:16];
-      `RTL_MEM.ram14.mem[i+32'h4000][7:0]  = mem_data_temp[j][15: 8];
-      `RTL_MEM.ram15.mem[i+32'h4000][7:0]  = mem_data_temp[j][ 7: 0];
-      j = j+1;
+    while (get_section(section_addr, section_len)) begin
+      int i;
+      $display("Loading section: addr %x len %x", section_addr, section_len);
+      buffer = new [section_len];
+      void'(read_section(section_addr, buffer));
+      for (i = 0; i*16+0 < section_len; i++)
+        `RTL_MEM.ram0.mem[i] = buffer[i*16+0];
+      for (i = 0; i*16+1 < section_len; i++)
+        `RTL_MEM.ram1.mem[i] = buffer[i*16+1];
+      for (i = 0; i*16+2 < section_len; i++)
+        `RTL_MEM.ram2.mem[i] = buffer[i*16+2];
+      for (i = 0; i*16+3 < section_len; i++)
+        `RTL_MEM.ram3.mem[i] = buffer[i*16+3];
+      for (i = 0; i*16+4 < section_len; i++)
+        `RTL_MEM.ram4.mem[i] = buffer[i*16+4];
+      for (i = 0; i*16+5 < section_len; i++)
+        `RTL_MEM.ram5.mem[i] = buffer[i*16+5];
+      for (i = 0; i*16+6 < section_len; i++)
+        `RTL_MEM.ram6.mem[i] = buffer[i*16+6];
+      for (i = 0; i*16+7 < section_len; i++)
+        `RTL_MEM.ram7.mem[i] = buffer[i*16+7];
+      for (i = 0; i*16+8 < section_len; i++)
+        `RTL_MEM.ram8.mem[i] = buffer[i*16+8];
+      for (i = 0; i*16+9 < section_len; i++)
+        `RTL_MEM.ram9.mem[i] = buffer[i*16+9];
+      for (i = 0; i*16+10 < section_len; i++)
+        `RTL_MEM.ram10.mem[i] = buffer[i*16+10];
+      for (i = 0; i*16+11 < section_len; i++)
+        `RTL_MEM.ram11.mem[i] = buffer[i*16+11];
+      for (i = 0; i*16+12 < section_len; i++)
+        `RTL_MEM.ram12.mem[i] = buffer[i*16+12];
+      for (i = 0; i*16+13 < section_len; i++)
+        `RTL_MEM.ram13.mem[i] = buffer[i*16+13];
+      for (i = 0; i*16+14 < section_len; i++)
+        `RTL_MEM.ram14.mem[i] = buffer[i*16+14];
+      for (i = 0; i*16+15 < section_len; i++)
+        `RTL_MEM.ram15.mem[i] = buffer[i*16+15];
     end
+    $display("\t********* Done loading memory *********");
+
   end
 
   initial
@@ -325,7 +331,7 @@ module tb();
       $dumpfile("test.vcd");
       $dumpvars;  
     `else
-      $fsdbDumpvars();
+      // $fsdbDumpvars();
     `endif
   `endif
   end
-- 
2.16.5

